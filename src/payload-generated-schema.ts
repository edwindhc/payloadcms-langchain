/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:db-schema` to regenerate this file.
 */

import type {} from '@payloadcms/db-sqlite'
import {
  sqliteTable,
  index,
  uniqueIndex,
  foreignKey,
  integer,
  text,
  numeric,
} from '@payloadcms/db-sqlite/drizzle/sqlite-core'
import { sql, relations } from '@payloadcms/db-sqlite/drizzle'

export const users_projects = sqliteTable(
  'users_projects',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: text('id').primaryKey(),
    proyecto: integer('proyecto_id')
      .notNull()
      .references(() => projects.id, {
        onDelete: 'set null',
      }),
  },
  (columns) => ({
    _orderIdx: index('users_projects_order_idx').on(columns._order),
    _parentIDIdx: index('users_projects_parent_id_idx').on(columns._parentID),
    users_projects_proyecto_idx: index('users_projects_proyecto_idx').on(columns.proyecto),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [users.id],
      name: 'users_projects_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const users = sqliteTable(
  'users',
  {
    id: integer('id').primaryKey(),
    updatedAt: text('updated_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text('created_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    email: text('email').notNull(),
    resetPasswordToken: text('reset_password_token'),
    resetPasswordExpiration: text('reset_password_expiration').default(
      sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`,
    ),
    salt: text('salt'),
    hash: text('hash'),
    loginAttempts: numeric('login_attempts').default('0'),
    lockUntil: text('lock_until').default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
  },
  (columns) => ({
    users_updated_at_idx: index('users_updated_at_idx').on(columns.updatedAt),
    users_created_at_idx: index('users_created_at_idx').on(columns.createdAt),
    users_email_idx: uniqueIndex('users_email_idx').on(columns.email),
  }),
)

export const media = sqliteTable(
  'media',
  {
    id: integer('id').primaryKey(),
    alt: text('alt').notNull(),
    updatedAt: text('updated_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text('created_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    url: text('url'),
    thumbnailURL: text('thumbnail_u_r_l'),
    filename: text('filename'),
    mimeType: text('mime_type'),
    filesize: numeric('filesize'),
    width: numeric('width'),
    height: numeric('height'),
    focalX: numeric('focal_x'),
    focalY: numeric('focal_y'),
  },
  (columns) => ({
    media_updated_at_idx: index('media_updated_at_idx').on(columns.updatedAt),
    media_created_at_idx: index('media_created_at_idx').on(columns.createdAt),
    media_filename_idx: uniqueIndex('media_filename_idx').on(columns.filename),
  }),
)

export const projects = sqliteTable(
  'projects',
  {
    id: integer('id').primaryKey(),
    code: text('code').notNull(),
    status: text('status').notNull(),
    firmRate: text('firm_rate').notNull(),
    name: text('name').notNull(),
    description: text('description').notNull(),
    comment: text('comment'),
    manager: text('manager').notNull(),
    updatedAt: text('updated_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text('created_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
  },
  (columns) => ({
    projects_code_idx: uniqueIndex('projects_code_idx').on(columns.code),
    projects_updated_at_idx: index('projects_updated_at_idx').on(columns.updatedAt),
    projects_created_at_idx: index('projects_created_at_idx').on(columns.createdAt),
  }),
)

export const master_data = sqliteTable(
  'master_data',
  {
    id: integer('id').primaryKey(),
    code: text('code').notNull(),
    name: text('name').notNull(),
    description: text('description').notNull(),
    updatedAt: text('updated_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text('created_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
  },
  (columns) => ({
    master_data_code_idx: uniqueIndex('master_data_code_idx').on(columns.code),
    master_data_updated_at_idx: index('master_data_updated_at_idx').on(columns.updatedAt),
    master_data_created_at_idx: index('master_data_created_at_idx').on(columns.createdAt),
  }),
)

export const master_value = sqliteTable(
  'master_value',
  {
    id: integer('id').primaryKey(),
    name: text('name').notNull(),
    description: text('description').notNull(),
    type: integer('type_id')
      .notNull()
      .references(() => master_data.id, {
        onDelete: 'set null',
      }),
    updatedAt: text('updated_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text('created_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
  },
  (columns) => ({
    master_value_type_idx: index('master_value_type_idx').on(columns.type),
    master_value_updated_at_idx: index('master_value_updated_at_idx').on(columns.updatedAt),
    master_value_created_at_idx: index('master_value_created_at_idx').on(columns.createdAt),
  }),
)

export const employees = sqliteTable(
  'employees',
  {
    id: integer('id').primaryKey(),
    name: text('name').notNull(),
    surname: text('surname').notNull(),
    startDate: text('start_date')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    endDate: text('end_date').default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    category: integer('category_id')
      .notNull()
      .references(() => master_value.id, {
        onDelete: 'set null',
      }),
    subCategory: integer('sub_category_id')
      .notNull()
      .references(() => master_value.id, {
        onDelete: 'set null',
      }),
    technology: integer('technology_id')
      .notNull()
      .references(() => master_value.id, {
        onDelete: 'set null',
      }),
    mainSkill: integer('main_skill_id')
      .notNull()
      .references(() => master_value.id, {
        onDelete: 'set null',
      }),
    secondarySkill: integer('secondary_skill_id')
      .notNull()
      .references(() => master_value.id, {
        onDelete: 'set null',
      }),
    email: text('email').notNull(),
    project: integer('project_id')
      .notNull()
      .references(() => projects.id, {
        onDelete: 'set null',
      }),
    updatedAt: text('updated_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text('created_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
  },
  (columns) => ({
    employees_category_idx: index('employees_category_idx').on(columns.category),
    employees_sub_category_idx: index('employees_sub_category_idx').on(columns.subCategory),
    employees_technology_idx: index('employees_technology_idx').on(columns.technology),
    employees_main_skill_idx: index('employees_main_skill_idx').on(columns.mainSkill),
    employees_secondary_skill_idx: index('employees_secondary_skill_idx').on(
      columns.secondarySkill,
    ),
    employees_email_idx: uniqueIndex('employees_email_idx').on(columns.email),
    employees_project_idx: index('employees_project_idx').on(columns.project),
    employees_updated_at_idx: index('employees_updated_at_idx').on(columns.updatedAt),
    employees_created_at_idx: index('employees_created_at_idx').on(columns.createdAt),
  }),
)

export const teams = sqliteTable(
  'teams',
  {
    id: integer('id').primaryKey(),
    proyecto: integer('proyecto_id').references(() => projects.id, {
      onDelete: 'set null',
    }),
    name: text('name').notNull(),
    description: text('description'),
    leader: integer('leader_id')
      .notNull()
      .references(() => employees.id, {
        onDelete: 'set null',
      }),
    updatedAt: text('updated_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text('created_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
  },
  (columns) => ({
    teams_proyecto_idx: index('teams_proyecto_idx').on(columns.proyecto),
    teams_leader_idx: index('teams_leader_idx').on(columns.leader),
    teams_updated_at_idx: index('teams_updated_at_idx').on(columns.updatedAt),
    teams_created_at_idx: index('teams_created_at_idx').on(columns.createdAt),
  }),
)

export const teams_rels = sqliteTable(
  'teams_rels',
  {
    id: integer('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: text('path').notNull(),
    employeesID: integer('employees_id'),
  },
  (columns) => ({
    order: index('teams_rels_order_idx').on(columns.order),
    parentIdx: index('teams_rels_parent_idx').on(columns.parent),
    pathIdx: index('teams_rels_path_idx').on(columns.path),
    teams_rels_employees_id_idx: index('teams_rels_employees_id_idx').on(columns.employeesID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [teams.id],
      name: 'teams_rels_parent_fk',
    }).onDelete('cascade'),
    employeesIdFk: foreignKey({
      columns: [columns['employeesID']],
      foreignColumns: [employees.id],
      name: 'teams_rels_employees_fk',
    }).onDelete('cascade'),
  }),
)

export const conversations_messages = sqliteTable(
  'conversations_messages',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: text('id').primaryKey(),
    role: text('role', { enum: ['system', 'user', 'assistant', 'tool'] }).notNull(),
    content: text('content').notNull(),
  },
  (columns) => ({
    _orderIdx: index('conversations_messages_order_idx').on(columns._order),
    _parentIDIdx: index('conversations_messages_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [conversations.id],
      name: 'conversations_messages_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const conversations = sqliteTable(
  'conversations',
  {
    id: integer('id').primaryKey(),
    proyecto: integer('proyecto_id').references(() => projects.id, {
      onDelete: 'set null',
    }),
    title: text('title').notNull(),
    updatedAt: text('updated_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text('created_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
  },
  (columns) => ({
    conversations_proyecto_idx: index('conversations_proyecto_idx').on(columns.proyecto),
    conversations_updated_at_idx: index('conversations_updated_at_idx').on(columns.updatedAt),
    conversations_created_at_idx: index('conversations_created_at_idx').on(columns.createdAt),
  }),
)

export const payload_locked_documents = sqliteTable(
  'payload_locked_documents',
  {
    id: integer('id').primaryKey(),
    globalSlug: text('global_slug'),
    updatedAt: text('updated_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text('created_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
  },
  (columns) => ({
    payload_locked_documents_global_slug_idx: index('payload_locked_documents_global_slug_idx').on(
      columns.globalSlug,
    ),
    payload_locked_documents_updated_at_idx: index('payload_locked_documents_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_locked_documents_created_at_idx: index('payload_locked_documents_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const payload_locked_documents_rels = sqliteTable(
  'payload_locked_documents_rels',
  {
    id: integer('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: text('path').notNull(),
    usersID: integer('users_id'),
    mediaID: integer('media_id'),
    projectsID: integer('projects_id'),
    'master-dataID': integer('master_data_id'),
    'master-valueID': integer('master_value_id'),
    employeesID: integer('employees_id'),
    teamsID: integer('teams_id'),
    conversationsID: integer('conversations_id'),
  },
  (columns) => ({
    order: index('payload_locked_documents_rels_order_idx').on(columns.order),
    parentIdx: index('payload_locked_documents_rels_parent_idx').on(columns.parent),
    pathIdx: index('payload_locked_documents_rels_path_idx').on(columns.path),
    payload_locked_documents_rels_users_id_idx: index(
      'payload_locked_documents_rels_users_id_idx',
    ).on(columns.usersID),
    payload_locked_documents_rels_media_id_idx: index(
      'payload_locked_documents_rels_media_id_idx',
    ).on(columns.mediaID),
    payload_locked_documents_rels_projects_id_idx: index(
      'payload_locked_documents_rels_projects_id_idx',
    ).on(columns.projectsID),
    payload_locked_documents_rels_master_data_id_idx: index(
      'payload_locked_documents_rels_master_data_id_idx',
    ).on(columns['master-dataID']),
    payload_locked_documents_rels_master_value_id_idx: index(
      'payload_locked_documents_rels_master_value_id_idx',
    ).on(columns['master-valueID']),
    payload_locked_documents_rels_employees_id_idx: index(
      'payload_locked_documents_rels_employees_id_idx',
    ).on(columns.employeesID),
    payload_locked_documents_rels_teams_id_idx: index(
      'payload_locked_documents_rels_teams_id_idx',
    ).on(columns.teamsID),
    payload_locked_documents_rels_conversations_id_idx: index(
      'payload_locked_documents_rels_conversations_id_idx',
    ).on(columns.conversationsID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payload_locked_documents.id],
      name: 'payload_locked_documents_rels_parent_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'payload_locked_documents_rels_users_fk',
    }).onDelete('cascade'),
    mediaIdFk: foreignKey({
      columns: [columns['mediaID']],
      foreignColumns: [media.id],
      name: 'payload_locked_documents_rels_media_fk',
    }).onDelete('cascade'),
    projectsIdFk: foreignKey({
      columns: [columns['projectsID']],
      foreignColumns: [projects.id],
      name: 'payload_locked_documents_rels_projects_fk',
    }).onDelete('cascade'),
    'master-dataIdFk': foreignKey({
      columns: [columns['master-dataID']],
      foreignColumns: [master_data.id],
      name: 'payload_locked_documents_rels_master_data_fk',
    }).onDelete('cascade'),
    'master-valueIdFk': foreignKey({
      columns: [columns['master-valueID']],
      foreignColumns: [master_value.id],
      name: 'payload_locked_documents_rels_master_value_fk',
    }).onDelete('cascade'),
    employeesIdFk: foreignKey({
      columns: [columns['employeesID']],
      foreignColumns: [employees.id],
      name: 'payload_locked_documents_rels_employees_fk',
    }).onDelete('cascade'),
    teamsIdFk: foreignKey({
      columns: [columns['teamsID']],
      foreignColumns: [teams.id],
      name: 'payload_locked_documents_rels_teams_fk',
    }).onDelete('cascade'),
    conversationsIdFk: foreignKey({
      columns: [columns['conversationsID']],
      foreignColumns: [conversations.id],
      name: 'payload_locked_documents_rels_conversations_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_preferences = sqliteTable(
  'payload_preferences',
  {
    id: integer('id').primaryKey(),
    key: text('key'),
    value: text('value', { mode: 'json' }),
    updatedAt: text('updated_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text('created_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
  },
  (columns) => ({
    payload_preferences_key_idx: index('payload_preferences_key_idx').on(columns.key),
    payload_preferences_updated_at_idx: index('payload_preferences_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_preferences_created_at_idx: index('payload_preferences_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const payload_preferences_rels = sqliteTable(
  'payload_preferences_rels',
  {
    id: integer('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: text('path').notNull(),
    usersID: integer('users_id'),
  },
  (columns) => ({
    order: index('payload_preferences_rels_order_idx').on(columns.order),
    parentIdx: index('payload_preferences_rels_parent_idx').on(columns.parent),
    pathIdx: index('payload_preferences_rels_path_idx').on(columns.path),
    payload_preferences_rels_users_id_idx: index('payload_preferences_rels_users_id_idx').on(
      columns.usersID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payload_preferences.id],
      name: 'payload_preferences_rels_parent_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'payload_preferences_rels_users_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_migrations = sqliteTable(
  'payload_migrations',
  {
    id: integer('id').primaryKey(),
    name: text('name'),
    batch: numeric('batch'),
    updatedAt: text('updated_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text('created_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
  },
  (columns) => ({
    payload_migrations_updated_at_idx: index('payload_migrations_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_migrations_created_at_idx: index('payload_migrations_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const relations_users_projects = relations(users_projects, ({ one }) => ({
  _parentID: one(users, {
    fields: [users_projects._parentID],
    references: [users.id],
    relationName: 'projects',
  }),
  proyecto: one(projects, {
    fields: [users_projects.proyecto],
    references: [projects.id],
    relationName: 'proyecto',
  }),
}))
export const relations_users = relations(users, ({ many }) => ({
  projects: many(users_projects, {
    relationName: 'projects',
  }),
}))
export const relations_media = relations(media, () => ({}))
export const relations_projects = relations(projects, () => ({}))
export const relations_master_data = relations(master_data, () => ({}))
export const relations_master_value = relations(master_value, ({ one }) => ({
  type: one(master_data, {
    fields: [master_value.type],
    references: [master_data.id],
    relationName: 'type',
  }),
}))
export const relations_employees = relations(employees, ({ one }) => ({
  category: one(master_value, {
    fields: [employees.category],
    references: [master_value.id],
    relationName: 'category',
  }),
  subCategory: one(master_value, {
    fields: [employees.subCategory],
    references: [master_value.id],
    relationName: 'subCategory',
  }),
  technology: one(master_value, {
    fields: [employees.technology],
    references: [master_value.id],
    relationName: 'technology',
  }),
  mainSkill: one(master_value, {
    fields: [employees.mainSkill],
    references: [master_value.id],
    relationName: 'mainSkill',
  }),
  secondarySkill: one(master_value, {
    fields: [employees.secondarySkill],
    references: [master_value.id],
    relationName: 'secondarySkill',
  }),
  project: one(projects, {
    fields: [employees.project],
    references: [projects.id],
    relationName: 'project',
  }),
}))
export const relations_teams_rels = relations(teams_rels, ({ one }) => ({
  parent: one(teams, {
    fields: [teams_rels.parent],
    references: [teams.id],
    relationName: '_rels',
  }),
  employeesID: one(employees, {
    fields: [teams_rels.employeesID],
    references: [employees.id],
    relationName: 'employees',
  }),
}))
export const relations_teams = relations(teams, ({ one, many }) => ({
  proyecto: one(projects, {
    fields: [teams.proyecto],
    references: [projects.id],
    relationName: 'proyecto',
  }),
  leader: one(employees, {
    fields: [teams.leader],
    references: [employees.id],
    relationName: 'leader',
  }),
  _rels: many(teams_rels, {
    relationName: '_rels',
  }),
}))
export const relations_conversations_messages = relations(conversations_messages, ({ one }) => ({
  _parentID: one(conversations, {
    fields: [conversations_messages._parentID],
    references: [conversations.id],
    relationName: 'messages',
  }),
}))
export const relations_conversations = relations(conversations, ({ one, many }) => ({
  proyecto: one(projects, {
    fields: [conversations.proyecto],
    references: [projects.id],
    relationName: 'proyecto',
  }),
  messages: many(conversations_messages, {
    relationName: 'messages',
  }),
}))
export const relations_payload_locked_documents_rels = relations(
  payload_locked_documents_rels,
  ({ one }) => ({
    parent: one(payload_locked_documents, {
      fields: [payload_locked_documents_rels.parent],
      references: [payload_locked_documents.id],
      relationName: '_rels',
    }),
    usersID: one(users, {
      fields: [payload_locked_documents_rels.usersID],
      references: [users.id],
      relationName: 'users',
    }),
    mediaID: one(media, {
      fields: [payload_locked_documents_rels.mediaID],
      references: [media.id],
      relationName: 'media',
    }),
    projectsID: one(projects, {
      fields: [payload_locked_documents_rels.projectsID],
      references: [projects.id],
      relationName: 'projects',
    }),
    'master-dataID': one(master_data, {
      fields: [payload_locked_documents_rels['master-dataID']],
      references: [master_data.id],
      relationName: 'master-data',
    }),
    'master-valueID': one(master_value, {
      fields: [payload_locked_documents_rels['master-valueID']],
      references: [master_value.id],
      relationName: 'master-value',
    }),
    employeesID: one(employees, {
      fields: [payload_locked_documents_rels.employeesID],
      references: [employees.id],
      relationName: 'employees',
    }),
    teamsID: one(teams, {
      fields: [payload_locked_documents_rels.teamsID],
      references: [teams.id],
      relationName: 'teams',
    }),
    conversationsID: one(conversations, {
      fields: [payload_locked_documents_rels.conversationsID],
      references: [conversations.id],
      relationName: 'conversations',
    }),
  }),
)
export const relations_payload_locked_documents = relations(
  payload_locked_documents,
  ({ many }) => ({
    _rels: many(payload_locked_documents_rels, {
      relationName: '_rels',
    }),
  }),
)
export const relations_payload_preferences_rels = relations(
  payload_preferences_rels,
  ({ one }) => ({
    parent: one(payload_preferences, {
      fields: [payload_preferences_rels.parent],
      references: [payload_preferences.id],
      relationName: '_rels',
    }),
    usersID: one(users, {
      fields: [payload_preferences_rels.usersID],
      references: [users.id],
      relationName: 'users',
    }),
  }),
)
export const relations_payload_preferences = relations(payload_preferences, ({ many }) => ({
  _rels: many(payload_preferences_rels, {
    relationName: '_rels',
  }),
}))
export const relations_payload_migrations = relations(payload_migrations, () => ({}))

type DatabaseSchema = {
  users_projects: typeof users_projects
  users: typeof users
  media: typeof media
  projects: typeof projects
  master_data: typeof master_data
  master_value: typeof master_value
  employees: typeof employees
  teams: typeof teams
  teams_rels: typeof teams_rels
  conversations_messages: typeof conversations_messages
  conversations: typeof conversations
  payload_locked_documents: typeof payload_locked_documents
  payload_locked_documents_rels: typeof payload_locked_documents_rels
  payload_preferences: typeof payload_preferences
  payload_preferences_rels: typeof payload_preferences_rels
  payload_migrations: typeof payload_migrations
  relations_users_projects: typeof relations_users_projects
  relations_users: typeof relations_users
  relations_media: typeof relations_media
  relations_projects: typeof relations_projects
  relations_master_data: typeof relations_master_data
  relations_master_value: typeof relations_master_value
  relations_employees: typeof relations_employees
  relations_teams_rels: typeof relations_teams_rels
  relations_teams: typeof relations_teams
  relations_conversations_messages: typeof relations_conversations_messages
  relations_conversations: typeof relations_conversations
  relations_payload_locked_documents_rels: typeof relations_payload_locked_documents_rels
  relations_payload_locked_documents: typeof relations_payload_locked_documents
  relations_payload_preferences_rels: typeof relations_payload_preferences_rels
  relations_payload_preferences: typeof relations_payload_preferences
  relations_payload_migrations: typeof relations_payload_migrations
}

declare module '@payloadcms/db-sqlite' {
  export interface GeneratedDatabaseSchema {
    schema: DatabaseSchema
  }
}
